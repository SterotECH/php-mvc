#!/usr/bin/env php
<?php

/*
 * --------------------------------------------------------------------
 * Stero MVC command-line tools
 * --------------------------------------------------------------------
 * The main entry point into the CLI system and allows you to run
 * commands and perform maintenance on your application.
 *
 * Because Stero MVC can handle CLI requests as just another web request
 * this class mainly acts as a pass thru to the framework itself.
 */

use Dotenv\Dotenv;
use Commands\MigrationCommand;
use Commands\AlterationCommand;

const BASE_PATH = __DIR__ ;

require 'app/Utils/utils.php';
require base_path('/vendor/autoload.php');

$dotenv = Dotenv::createImmutable(__DIR__);
$dotenv->load();

require 'app/Utils/Database.php';
require 'app/Command/AlterationCommand.php';
require 'app/Command/MigrationCommand.php';

$commands = [
    'make:migration' => [MigrationCommand::class, 'makeMigration'],
    'migrate' => [MigrationCommand::class, 'migrate'],
    'refresh' => [MigrationCommand::class, 'refresh'],
    'db:down' => [MigrationCommand::class, 'down'],
    'db:alter' => [AlterationCommand::class, 'alterTable'],
];

$command = $argv[1] ?? '';
$arguments = array_slice($argv, 2);

if (empty($command)) {
    echo "Available commands:\n";
    foreach ($commands as $cmd => $handler) {
        echo "- $cmd\n";
    }
} else {
    $matchedCommands = array_filter(array_keys($commands), function ($cmd) use ($command) {
        return strpos($cmd, $command) === 0;
    });

    if (count($matchedCommands) === 1) {
        $matchedCommand = reset($matchedCommands);
        [$class, $method] = $commands[$matchedCommand];
        $class::$method(...$arguments);
    } elseif (count($matchedCommands) > 1) {
        echo "Did you mean one of these commands?\n";
        foreach ($matchedCommands as $cmd) {
            echo "- $cmd\n";
        }
    } else {
        echo "Command not found.\n";
    }
}

