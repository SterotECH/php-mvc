#!/usr/bin/env php
<?php

/*
 * --------------------------------------------------------------------
 * Stero MVC command-line tools
 * --------------------------------------------------------------------
 * The main entry point into the CLI system and allows you to run
 * commands and perform maintenance on your application.
 *
 * Because Stero MVC can handle CLI requests as just another web request
 * this class mainly acts as a pass thru to the framework itself.
 */

use App\Console\Commands\AlterationCommand;
use App\Console\Commands\MigrationCommand;
use App\Console\Commands\SeederCommand;
use App\Console\Commands\ServeCommand;
use Dotenv\Dotenv;

const BASE_PATH = __DIR__ ;

require 'app/Core/utils.php';
require base_path('/vendor/autoload.php');

$dotenv = Dotenv::createImmutable(__DIR__);
$dotenv->load();

spl_autoload_register(function ($class) {
    $classPath = str_replace('\\', DIRECTORY_SEPARATOR, $class) . '.php';
    $classFile = base_path("$classPath");

    if (file_exists($classFile)) {
        require $classFile;
    }
});

$commands = [
    'make:migration' => [MigrationCommand::class, 'makeMigration'],
    'migrate' => [MigrationCommand::class, 'migrate'],
    'refresh' => [MigrationCommand::class, 'refresh'],
    'db:down' => [MigrationCommand::class, 'down'],
    'db:alter' => [AlterationCommand::class, 'alterTable'],
    'db:status' => [MigrationCommand::class, 'status'],
    'delete:migration' => [MigrationCommand::class, 'deleteMigration'],
    'make:seeder' => [SeederCommand::class, 'makeSeeder'],
    'serve' => [ServeCommand::class, 'handle']
];

$command = $argv[1] ?? '';
$arguments = array_slice($argv, 2);

if (empty($command)) {
    echo "Available commands:\n";
    foreach ($commands as $cmd => $handler) {
        echo "- $cmd\n";
    }
} else{
    $matchedCommands = array_filter(array_keys($commands), function ($cmd) use ($command) {
        return str_starts_with($cmd, $command);
    });

    if (count($matchedCommands) === 1) {
        $matchedCommand = reset($matchedCommands);
        [$class, $method] = $commands[$matchedCommand];
        $class::$method(...$arguments);
    } elseif (count($matchedCommands) > 1) {
        echo "Multiple matching commands found. Please select one:\n";
        $index = 0;
        $indexedCommands = [];
        foreach ($matchedCommands as $cmd) {
            $indexedCommands[$index] = $cmd;
            echo "[$index] $cmd\n";
            $index++;
        }
        echo "Enter the number corresponding to the command: ";
        $selected = (int) readline();
        $selectedCommand = $indexedCommands[$selected] ?? null;
        if ($selectedCommand) {
            [$class, $method] = $commands[$selectedCommand];
            $class::$method(...$arguments);
        } else {
            echo "Invalid selection.\n";
        }
    } else {
        echo "Command not found.\n";
    }
}


